{"version":3,"sources":["components/Header/index.js","components/EachRow/index.js","components/Footer/index.js","components/EachStateSuggestion/index.js","states.js","components/Home/index.js","components/About/index.js","components/BoxItem/index.js","components/TopDistrictItems/index.js","components/LineChartItem/index.js","boxes.js","components/StateItem/index.js","App.js","index.js"],"names":["withRouter","useState","isClicked","setIsClicked","className","to","onClick","EachRow","props","details","onClickEachState","confirmed","name","active","deceased","recovered","population","internationalNumberFormat","Intl","NumberFormat","event","format","Footer","EachStateSuggestion","state_code","state_name","statesList","apiStatusConstants","Home","state","resultList","apiStatus","activeStateNameDetails","searchInput","isSearchActive","convertObjectsDataIntoListItemsUsingForInMethod","data","Object","keys","forEach","keyName","total","tested","meta","stateName","find","undefined","push","stateCode","getAllStatesCovidCases","a","setState","fetch","response","ok","json","updatedList","preventDefault","renderTable","map","each","renderLoadingView","testid","type","color","height","width","renderFailureView","src","alt","onClickAscSortOption","sortedData","sort","b","onClickDescSortOption","renderTableView","renderAll","onChangeSearchInput","target","value","this","countryWideConfirmedCasesCount","reduce","prev","current","countryWideActiveCasesCount","countryWideRecoveredCasesCount","countryWideDeceasedCasesCount","searchResults","filter","toLowerCase","includes","placeholder","onChange","length","Component","About","faqsList","getFaqs","updatedFaqsList","faq","qno","question","answer","category","renderFaqsListView","eachFaq","BoxItem","stateData","onClickBox","activeBox","id","imageUrl","displayText","altName","cName","activeClassName","TopDistrictItems","dataSorted","counts","districtWiseConfirmed","name1","districtName","districtWiseRecovered","districtWiseDeceased","districtWiseActive","dataSortedFunction","console","log","months","lineGraphs","LineChartItem","allGraphData","numFormatter","num","toFixed","numFormatter1","YAxis","stroke","tickFormatter","dateFormatter","d","monthFromDate","Date","getMonth","getCovidTimeLineDetails","sName","graphData","data1","datesFromResponse","dates","eachDateKey","graphConfirmed","graphDeceased","graphRecovered","combinedData","date","vaccinated","vaccinated1","vaccinated2","BarChart","XAxis","dataKey","Tooltip","Legend","Bar","fill","label","position","LineChart","tickCount","Line","boxes","StateItem","allDistrictsData","getStateDetails","match","params","districts","lastUpdateDate","last_updated","getDate","year","getUTCFullYear","month","overallDate","updatedStateData","updatedDistrictsList","eachDistrictName","updatedEachDistrict","sortData","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3914761.chunk.js","sourcesContent":["import {useState} from 'react'\nimport {Link, withRouter} from 'react-router-dom'\nimport {AiOutlineMenuFold} from 'react-icons/ai'\nimport {ImCancelCircle} from 'react-icons/im'\nimport './index.css'\n\nconst Header = () => {\n  const [isClicked, setIsClicked] = useState(false)\n  const onClickHomeIcon = () => {\n    setIsClicked(true)\n  }\n\n  const onClickCancelIcon = () => {\n    setIsClicked(false)\n  }\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"mobile-view\">\n          <Link to=\"/\" className=\"link-item\">\n            <div className=\"mobile-logo\">\n              <p className=\"covid-name\">\n                COVID19<span className=\"india-name\">INDIA</span>\n              </p>\n            </div>\n          </Link>\n          <AiOutlineMenuFold className=\"home-icon\" onClick={onClickHomeIcon} />\n        </div>\n\n        <div className=\"desktop-view\">\n          <Link to=\"/\" className=\"link-item\">\n            <div className=\"desktop-logo\">\n              <p className=\"covid-name\">\n                COVID19<span className=\"india-name\">INDIA</span>\n              </p>\n            </div>\n          </Link>\n          <ul className=\"icons-2\">\n            <Link to=\"/\" className=\"link-item\">\n              <li>Home</li>\n            </Link>\n            <Link to=\"/about\" className=\"link-item\">\n              <li>About</li>\n            </Link>\n          </ul>\n        </div>\n      </nav>\n      {isClicked ? (\n        <div className=\"navbar-below-mobile\">\n          <div className=\"mobile-below\">\n            <Link to=\"/\" className=\"link-item\">\n              <li>Home</li>\n            </Link>\n            <Link to=\"/about\" className=\"link-item\">\n              <li>About</li>\n            </Link>\n          </div>\n          <ImCancelCircle className=\"cancel-icon\" onClick={onClickCancelIcon} />\n        </div>\n      ) : null}\n    </>\n  )\n}\nexport default withRouter(Header)\n","const EachRow = props => {\n  const {details, onClickEachState} = props\n  const {confirmed, name, active, deceased, recovered, population} = details\n  const internationalNumberFormat = new Intl.NumberFormat('en-US')\n  return (\n    <tr onClick={event => onClickEachState(event, details)}>\n      <td className=\"tro\">{name}</td>\n      <td className=\"tr1\">{internationalNumberFormat.format(confirmed)}</td>\n      <td className=\"tr2\">{internationalNumberFormat.format(active)}</td>\n      <td className=\"tr3\">{internationalNumberFormat.format(recovered)}</td>\n      <td className=\"tr4\">{internationalNumberFormat.format(deceased)}</td>\n      <td className=\"tr4\">{internationalNumberFormat.format(population)}</td>\n    </tr>\n  )\n}\n\nexport default EachRow\n","import {FiInstagram, FiTwitter} from 'react-icons/fi'\nimport {VscGithubAlt} from 'react-icons/vsc'\nimport './index.css'\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p className=\"covid-name-footer\">\n      COVID19<span className=\"india-name-footer\">INDIA</span>\n    </p>\n    <p className=\"footer-tag\">\n      we stand with everyone fighting on the front lines\n    </p>\n    <div className=\"footer-icons-section\">\n      <VscGithubAlt className=\"footer-icon\" />\n      <FiInstagram className=\"footer-icon\" />\n      <FiTwitter className=\"footer-icon\" />\n    </div>\n  </div>\n)\n\nexport default Footer\n","import {Link} from 'react-router-dom'\nimport {BiChevronRightSquare} from 'react-icons/bi'\nimport './index.css'\n\nconst EachStateSuggestion = props => {\n  const {details} = props\n  return (\n    <Link to={`/state/${details.state_code}`} className=\"each-state-link\">\n      <li className=\"each-state-item\">\n        <p className=\"each-state-name\">{details.state_name}</p>\n        <div className=\"each-state-navigation\">\n          <p>{details.state_code}</p>\n          <BiChevronRightSquare />\n        </div>\n      </li>\n    </Link>\n  )\n}\n\nexport default EachStateSuggestion\n","const statesList = [\n  {\n    state_code: 'AN',\n    state_name: 'Andaman and Nicobar Islands',\n  },\n  {\n    state_code: 'AP',\n    state_name: 'Andhra Pradesh',\n  },\n  {\n    state_code: 'AR',\n    state_name: 'Arunachal Pradesh',\n  },\n  {\n    state_code: 'AS',\n    state_name: 'Assam',\n  },\n  {\n    state_code: 'BR',\n    state_name: 'Bihar',\n  },\n  {\n    state_code: 'CH',\n    state_name: 'Chandigarh',\n  },\n  {\n    state_code: 'CT',\n    state_name: 'Chhattisgarh',\n  },\n  {\n    state_code: 'DN',\n    state_name: 'Dadra and Nagar Haveli and Daman and Diu',\n  },\n  {\n    state_code: 'DL',\n    state_name: 'Delhi',\n  },\n  {\n    state_code: 'GA',\n    state_name: 'Goa',\n  },\n  {\n    state_code: 'GJ',\n    state_name: 'Gujarat',\n  },\n  {\n    state_code: 'HR',\n    state_name: 'Haryana',\n  },\n  {\n    state_code: 'HP',\n    state_name: 'Himachal Pradesh',\n  },\n  {\n    state_code: 'JK',\n    state_name: 'Jammu and Kashmir',\n  },\n  {\n    state_code: 'JH',\n    state_name: 'Jharkhand',\n  },\n  {\n    state_code: 'KA',\n    state_name: 'Karnataka',\n  },\n  {\n    state_code: 'KL',\n    state_name: 'Kerala',\n  },\n  {\n    state_code: 'LA',\n    state_name: 'Ladakh',\n  },\n  {\n    state_code: 'LD',\n    state_name: 'Lakshadweep',\n  },\n  {\n    state_code: 'MH',\n    state_name: 'Maharashtra',\n  },\n  {\n    state_code: 'MP',\n    state_name: 'Madhya Pradesh',\n  },\n  {\n    state_code: 'MN',\n    state_name: 'Manipur',\n  },\n  {\n    state_code: 'ML',\n    state_name: 'Meghalaya',\n  },\n  {\n    state_code: 'MZ',\n    state_name: 'Mizoram',\n  },\n  {\n    state_code: 'NL',\n    state_name: 'Nagaland',\n  },\n  {\n    state_code: 'OR',\n    state_name: 'Odisha',\n  },\n  {\n    state_code: 'PY',\n    state_name: 'Puducherry',\n  },\n  {\n    state_code: 'PB',\n    state_name: 'Punjab',\n  },\n  {\n    state_code: 'RJ',\n    state_name: 'Rajasthan',\n  },\n  {\n    state_code: 'SK',\n    state_name: 'Sikkim',\n  },\n  {\n    state_code: 'TN',\n    state_name: 'Tamil Nadu',\n  },\n  {\n    state_code: 'TG',\n    state_name: 'Telangana',\n  },\n  {\n    state_code: 'TR',\n    state_name: 'Tripura',\n  },\n  {\n    state_code: 'UP',\n    state_name: 'Uttar Pradesh',\n  },\n  {\n    state_code: 'UT',\n    state_name: 'Uttarakhand',\n  },\n  {\n    state_code: 'WB',\n    state_name: 'West Bengal',\n  },\n]\n\nexport default statesList\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\nimport {FcGenericSortingAsc, FcGenericSortingDesc} from 'react-icons/fc'\nimport EachRow from '../EachRow'\nimport Footer from '../Footer'\nimport './index.css'\nimport EachStateSuggestion from '../EachStateSuggestion'\nimport statesList from '../../states'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n  inProgress: 'IN_PROGRESS',\n}\n\nclass Home extends Component {\n  state = {\n    resultList: [],\n    apiStatus: apiStatusConstants.initial,\n    activeStateNameDetails: '',\n    searchInput: '',\n    isSearchActive: false,\n  }\n\n  componentDidMount() {\n    this.getAllStatesCovidCases()\n  }\n\n  convertObjectsDataIntoListItemsUsingForInMethod = data => {\n    const resultList = []\n    const keyNames = Object.keys(data)\n    keyNames.forEach(keyName => {\n      if (data[keyName]) {\n        const {total} = data[keyName]\n        const confirmed = total.confirmed ? total.confirmed : 0\n        const deceased = total.deceased ? total.deceased : 0\n        const recovered = total.recovered ? total.recovered : 0\n        const tested = total.tested ? total.tested : 0\n        const population = data[keyName].meta.population\n          ? data[keyName].meta.population\n          : 0\n        const stateName = [\n          statesList.find(state => state.state_code === keyName),\n        ]\n        if (stateName[0]?.state_name !== undefined) {\n          resultList.push({\n            stateCode: keyName,\n            confirmed,\n            name: stateName[0]?.state_name,\n            deceased,\n            recovered,\n            tested,\n            population,\n            active: confirmed - (deceased + recovered),\n          })\n        }\n      }\n    })\n    return resultList\n  }\n\n  getAllStatesCovidCases = async () => {\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const response = await fetch('https://apis.ccbp.in/covid19-state-wise-data')\n    if (response.ok === true) {\n      const data = await response.json()\n      const updatedList = this.convertObjectsDataIntoListItemsUsingForInMethod(\n        data,\n      )\n      this.setState({\n        resultList: updatedList,\n        apiStatus: apiStatusConstants.success,\n      })\n    } else {\n      this.setState({apiStatus: apiStatusConstants.failure})\n    }\n  }\n\n  onClickEachState = (event, details) => {\n    event.preventDefault()\n    this.setState({activeStateNameDetails: details})\n  }\n\n  renderTable = () => {\n    const {resultList} = this.state\n    return (\n      <tbody>\n        {resultList.map(each => (\n          <EachRow\n            key={each.stateCode}\n            details={each}\n            onClickEachState={this.onClickEachState}\n          />\n        ))}\n      </tbody>\n    )\n  }\n\n  renderLoadingView = () => (\n    <div className=\"products-loader-container\" testid=\"homeRouteLoader\">\n      <Loader type=\"Oval\" color=\"#007bff\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderFailureView = () => (\n    <div className=\"failure-view\">\n      <img\n        src=\"https://assets.ccbp.in/frontend/react-js/failure-img.png\"\n        alt=\"failure view\"\n        className=\"fail-image\"\n      />\n      <p>Oops! Something Went Wrong</p>\n      <button\n        className=\"retry-btn\"\n        type=\"button\"\n        onClick={this.getAllStatesCovidCases}\n      >\n        Retry\n      </button>\n    </div>\n  )\n\n  onClickAscSortOption = () => {\n    const {resultList} = this.state\n    function compare(a, b) {\n      if (a.name < b.name) {\n        return -1\n      }\n      return 0\n    }\n    const sortedData = resultList.sort(compare)\n    this.setState({resultList: sortedData})\n  }\n\n  onClickDescSortOption = () => {\n    const {resultList} = this.state\n    function compare(a, b) {\n      if (a.name > b.name) {\n        return -1\n      }\n      return 0\n    }\n    const sortedData = resultList.sort(compare)\n    this.setState({resultList: sortedData})\n  }\n\n  renderTableView = () => (\n    <div className=\"table-design\">\n      <table className=\"users_table\" testid=\"stateWiseCovidDataTable\">\n        <thead className=\"thead\">\n          <tr>\n            <th>\n              <div className=\"sort-sec\">\n                <p>States/UT</p>\n                <button\n                  type=\"button\"\n                  testid=\"ascendingSort\"\n                  className=\"sort-btn\"\n                  onClick={this.onClickAscSortOption}\n                >\n                  <FcGenericSortingAsc className=\"sort-icon\" />\n                </button>\n                <button\n                  className=\"sort-btn\"\n                  tested=\"descendingSort\"\n                  type=\"button\"\n                  onClick={this.onClickDescSortOption}\n                >\n                  <FcGenericSortingDesc className=\"sort-icon\" />\n                </button>\n              </div>\n            </th>\n            <th>Confirmed</th>\n            <th>Active</th>\n            <th>Recovered</th>\n            <th>Deceased</th>\n            <th>Population</th>\n          </tr>\n        </thead>\n        {this.renderTable()}\n      </table>\n    </div>\n  )\n\n  renderAll = () => {\n    const {apiStatus} = this.state\n\n    switch (apiStatus) {\n      case apiStatusConstants.success:\n        return this.renderTableView()\n      case apiStatusConstants.failure:\n        return this.renderFailureView()\n      case apiStatusConstants.inProgress:\n        return this.renderLoadingView()\n      default:\n        return null\n    }\n  }\n\n  onChangeSearchInput = event => {\n    event.preventDefault()\n    this.setState({searchInput: event.target.value, isSearchActive: true})\n  }\n\n  render() {\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    const {searchInput, isSearchActive, resultList} = this.state\n    const countryWideConfirmedCasesCount = resultList.reduce(\n      (prev, current) => prev + current.confirmed,\n      0,\n    )\n    const countryWideActiveCasesCount = resultList.reduce(\n      (prev, current) => prev + current.active,\n      0,\n    )\n    const countryWideRecoveredCasesCount = resultList.reduce(\n      (prev, current) => prev + current.recovered,\n      0,\n    )\n    const countryWideDeceasedCasesCount = resultList.reduce(\n      (prev, current) => prev + current.deceased,\n      0,\n    )\n    const searchResults = statesList.filter(\n      each =>\n        each.state_name.toLowerCase().includes(searchInput.toLowerCase()) ||\n        each.state_code.toLowerCase().includes(searchInput.toLowerCase()),\n    )\n    return (\n      <>\n        <div\n          className=\"home-bg\"\n          onClick={() => {\n            this.setState({isSearchActive: false, searchInput: ''})\n          }}\n          aria-hidden=\"true\"\n        >\n          <input\n            value={searchInput}\n            type=\"search\"\n            placeholder=\"Search\"\n            className=\"search-box\"\n            onChange={this.onChangeSearchInput}\n          />\n          {isSearchActive ? (\n            <ul\n              className=\"search-list-section\"\n              testid=\"searchResultsUnorderedList\"\n            >\n              {searchResults.length === 0 ? (\n                <p className=\"no-results-section\">\n                  There is no State Name with your Search {searchInput}\n                </p>\n              ) : (\n                searchResults.map(each => (\n                  <EachStateSuggestion key={each.state_code} details={each} />\n                ))\n              )}\n            </ul>\n          ) : (\n            <div className=\"home-icons-section\">\n              <div className=\"section1\">\n                <div className=\"confirmed\" testid=\"countryWideConfirmedCases\">\n                  <p>Confirmed</p>\n                  <img\n                    src=\"https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/Group_rtygto.png\"\n                    alt=\"country wide confirmed cases pic\"\n                    className=\"confirmed-image\"\n                  />\n                  <p>\n                    {internationalNumberFormat.format(\n                      countryWideConfirmedCasesCount,\n                    )}\n                  </p>\n                </div>\n                <div className=\"active\" testid=\"countryWideActiveCases\">\n                  <p>Active</p>\n                  <img\n                    src=\"https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/protection_1_btp8wk.png\"\n                    alt=\"country wide active cases pic\"\n                    className=\"confirmed-image\"\n                  />\n                  <p>\n                    {internationalNumberFormat.format(\n                      countryWideActiveCasesCount,\n                    )}\n                  </p>\n                </div>\n              </div>\n              <div className=\"section1\">\n                <div className=\"recovered\" testid=\"countryWideRecoveredCases\">\n                  <p>Recovered</p>\n                  <img\n                    src=\"https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/recovered_1_mnz2xy.png\"\n                    alt=\"country wide recovered cases pic\"\n                    className=\"confirmed-image\"\n                  />\n                  <p>\n                    {internationalNumberFormat.format(\n                      countryWideRecoveredCasesCount,\n                    )}\n                  </p>\n                </div>\n                <div className=\"deceased\" testid=\"countryWideDeceasedCases\">\n                  <p>Deceased</p>\n                  <img\n                    src=\"https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/Outline_fqrmo2.png\"\n                    alt=\"country wide deceased cases pic\"\n                    className=\"confirmed-image\"\n                  />\n                  <p>\n                    {internationalNumberFormat.format(\n                      countryWideDeceasedCasesCount,\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          {!isSearchActive && this.renderAll()}\n        </div>\n        <Footer />\n      </>\n    )\n  }\n}\n\nexport default Home\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\nimport Footer from '../Footer'\nimport './index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n  inProgress: 'IN_PROGRESS',\n}\n\nclass About extends Component {\n  state = {faqsList: [], apiStatus: apiStatusConstants.initial}\n\n  componentDidMount() {\n    this.getFaqs()\n  }\n\n  getFaqs = async () => {\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const response = await fetch('https://apis.ccbp.in/covid19-faqs')\n    if (response.ok === true) {\n      const data = await response.json()\n      const updatedFaqsList = data.faq.map(each => ({\n        qno: each.qno,\n        question: each.question,\n        answer: each.answer,\n        category: each.category,\n      }))\n      this.setState({\n        faqsList: updatedFaqsList,\n        apiStatus: apiStatusConstants.success,\n      })\n    } else {\n      this.setState({apiStatus: apiStatusConstants.failure})\n    }\n  }\n\n  renderFaqsListView = () => {\n    const {faqsList} = this.state\n    return (\n      <ul className=\"ul\">\n        {faqsList.map(eachFaq => (\n          <li key={eachFaq.qno}>\n            <p className=\"question\">{eachFaq.question}</p>\n            <p className=\"answer\">{eachFaq.answer}</p>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  renderLoadingView = () => (\n    <div className=\"products-loader-container\">\n      <Loader type=\"Oval\" color=\"#007bff\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderFailureView = () => (\n    <div className=\"failure-view\">\n      <img\n        src=\"https://assets.ccbp.in/frontend/react-js/failure-img.png\"\n        alt=\"failure view\"\n        className=\"fail-image\"\n      />\n      <p>Oops! Something Went Wrong</p>\n      <button className=\"retry-btn\" type=\"button\" onClick={this.getFaqs}>\n        Retry\n      </button>\n    </div>\n  )\n\n  renderAll = () => {\n    const {apiStatus} = this.state\n\n    switch (apiStatus) {\n      case apiStatusConstants.success:\n        return this.renderFaqsListView()\n      case apiStatusConstants.failure:\n        return this.renderFailureView()\n      case apiStatusConstants.inProgress:\n        return this.renderLoadingView()\n      default:\n        return null\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"about-bg\">\n        <div className=\"about-section\">\n          <h1 className=\"about-head\">About</h1>\n          <p className=\"last-update\">Latest Update</p>\n          <h1 className=\"about-head-2\">\n            COVID-19 vaccines be ready for distribution\n          </h1>\n          {this.renderAll()}\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default About\n","import './index.css'\n\nconst BoxItem = props => {\n  const {details, stateData, onClickBox, activeBox} = props\n  const {id, imageUrl, displayText, altName, cName} = details\n  let activeClassName = ''\n  if (activeBox === id) {\n    activeClassName = `${id}1`\n  }\n  return (\n    <li\n      className={`${cName} ${activeClassName} li-box`}\n      onClick={() => onClickBox(id)}\n    >\n      <p>{displayText}</p>\n      <img src={imageUrl} alt={altName} className=\"confirmed-image\" />\n      <p>{stateData?.[id]}</p>\n    </li>\n  )\n}\n\nexport default BoxItem\n","import './index.css'\n\nconst TopDistrictItems = props => {\n  const {details, activeBox} = props\n  const internationalNumberFormat = new Intl.NumberFormat('en-US')\n  const dataSortedFunction = () => {\n    switch (activeBox) {\n      case 'confirmed':\n        return details.map(each => ({\n          counts: each.districtWiseConfirmed\n            ? internationalNumberFormat.format(each.districtWiseConfirmed)\n            : 0,\n          name1: each.districtName,\n        }))\n      case 'recovered':\n        return details.map(each => ({\n          counts: each.districtWiseRecovered\n            ? internationalNumberFormat.format(each.districtWiseRecovered)\n            : 0,\n          name1: each.districtName,\n        }))\n      case 'deceased':\n        return details.map(each => ({\n          counts: each.districtWiseDeceased\n            ? internationalNumberFormat.format(each.districtWiseDeceased)\n            : 0,\n          name1: each.districtName,\n        }))\n      case 'active':\n        return details.map(each => ({\n          counts: each.districtWiseActive\n            ? internationalNumberFormat.format(each.districtWiseActive)\n            : 0,\n          name1: each.districtName,\n        }))\n      default:\n        return null\n    }\n  }\n\n  const dataSorted = dataSortedFunction()\n  console.log(dataSorted)\n\n  return (\n    <ul className=\"top-districts-ul\">\n      {dataSorted.map(each => (\n        <li className=\"top-districts-li\" key={each.name1}>\n          <p className=\"district-count\">{each.counts}</p>\n          <p>{each.name1}</p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TopDistrictItems\n","/* eslint-disable consistent-return */\nimport {Component} from 'react'\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  BarChart,\n  Bar,\n} from 'recharts'\nimport './index.css'\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n]\n\nconst lineGraphs = [\n  {\n    id: 'confirmed',\n    color: '#ff073a',\n  },\n  {\n    id: 'deceased',\n    color: ' #6c757d',\n  },\n  {\n    id: 'recovered',\n    color: '#28a745',\n  },\n  {\n    id: 'active',\n    color: '#007bff',\n  },\n  {\n    id: 'tested',\n    color: '#9673B9',\n  },\n]\n\nclass LineChartItem extends Component {\n  state = {allGraphData: []}\n\n  componentDidMount() {\n    this.getCovidTimeLineDetails()\n  }\n\n  numFormatter = num => {\n    if (num > 999 && num < 1000000) {\n      return `${(num / 1000).toFixed(1)}K` // convert to K for number from > 1000 < 1 million\n    }\n    if (num > 1000000) {\n      return `${(num / 1000000).toFixed(1)}M` // convert to M for number from > 1 million\n    }\n    if (num < 900) {\n      return num // if value < 1000, nothing to do\n    }\n  }\n\n  numFormatter1 = each => {\n    if (each.id === 'confirmed') {\n      return (\n        <YAxis\n          stroke={each.color}\n          tickFormatter={confirmed => this.numFormatter(confirmed)}\n        />\n      )\n    }\n    if (each.id === 'deceased') {\n      return (\n        <YAxis\n          stroke={each.color}\n          tickFormatter={deceased => this.numFormatter(deceased)}\n        />\n      )\n    }\n    if (each.id === 'recovered') {\n      return (\n        <YAxis\n          stroke={each.color}\n          tickFormatter={recovered => this.numFormatter(recovered)}\n        />\n      )\n    }\n    if (each.id === 'active') {\n      return (\n        <YAxis\n          stroke={each.color}\n          tickFormatter={active => this.numFormatter(active)}\n        />\n      )\n    }\n    if (each.id === 'tested') {\n      return (\n        <YAxis\n          stroke={each.color}\n          tickFormatter={tested => this.numFormatter(tested)}\n        />\n      )\n    }\n  }\n\n  dateFormatter = d => {\n    const monthFromDate = new Date(d).getMonth()\n    return months[monthFromDate]\n  }\n\n  getCovidTimeLineDetails = async () => {\n    const {sName} = this.props\n    const graphData = []\n    const response = await fetch(\n      `https://apis.ccbp.in/covid19-timelines-data/${sName}`,\n    )\n    const data1 = await response.json()\n    const datesFromResponse = data1[`${sName}`].dates\n    const dateKeys = Object.keys(datesFromResponse)\n    dateKeys.forEach(eachDateKey => {\n      if (datesFromResponse[eachDateKey]) {\n        const {total} = datesFromResponse[eachDateKey]\n        const graphConfirmed = total.confirmed ? total.confirmed : 0\n        const graphDeceased = total.deceased ? total.deceased : 0\n        const graphRecovered = total.recovered ? total.recovered : 0\n        const graphTested = total.tested ? total.tested : 0\n        const graphDate = eachDateKey\n        const graphVaccinated = total.vaccinated1\n          ? total.vaccinated1 + total.vaccinated2\n          : 0\n        const combinedData = {\n          confirmed: graphConfirmed,\n          deceased: graphDeceased,\n          recovered: graphRecovered,\n          tested: graphTested,\n          date: graphDate,\n          vaccinated: graphVaccinated,\n          active: graphConfirmed - (graphDeceased + graphRecovered),\n        }\n        graphData.push(combinedData)\n      }\n    })\n    this.setState({allGraphData: graphData})\n  }\n\n  render() {\n    const {allGraphData} = this.state\n    return (\n      <div>\n        <div className=\"line-chart-ul-mobile\">\n          <BarChart data={allGraphData} width={900} height={400}>\n            <XAxis\n              dataKey=\"date\"\n              tickFormatter={date => this.dateFormatter(date)}\n            />\n            <YAxis\n              tickFormatter={confirmed => this.numFormatter(confirmed)}\n              stroke=\"#ffff\"\n            />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"confirmed \"\n              fill=\"#8884d8\"\n              className=\"bar\"\n              stroke=\"#ffff\"\n              label={{position: 'top', color: 'white'}}\n            />\n          </BarChart>\n        </div>\n        <div className=\"line-chart-ul-desktop\">\n          <BarChart data={allGraphData} width={1300} height={400}>\n            <XAxis\n              dataKey=\"date\"\n              tickFormatter={date => this.dateFormatter(date)}\n            />\n            <YAxis\n              tickFormatter={confirmed => this.numFormatter(confirmed)}\n              stroke=\"#ffff\"\n            />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"confirmed \"\n              fill=\"#8884d8\"\n              className=\"bar\"\n              stroke=\"#ffff\"\n              label={{position: 'top', color: 'white'}}\n            />\n          </BarChart>\n        </div>\n        <ul className=\"line-chart-ul-desktop\">\n          {lineGraphs.map(each => (\n            <li key={each.id} className={`graph-page-${each.id} li-line-chart`}>\n              <LineChart data={allGraphData} width={900} height={300}>\n                <XAxis\n                  dataKey=\"date\"\n                  stroke={each.color}\n                  tickCount={1}\n                  tickFormatter={date => this.dateFormatter(date)}\n                />\n                {this.numFormatter1(each)}\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey={each.id} stroke={each.color} />\n              </LineChart>\n            </li>\n          ))}\n        </ul>\n        <ul className=\"line-chart-ul-mobile\">\n          {lineGraphs.map(each => (\n            <li key={each.id} className={`graph-page-${each.id} li-line-chart`}>\n              <LineChart data={allGraphData} width={320} height={200}>\n                <XAxis\n                  dataKey=\"date\"\n                  stroke={each.color}\n                  tickCount={1}\n                  tickFormatter={date => this.dateFormatter(date)}\n                />\n                {this.numFormatter1(each)}\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey={each.id} stroke={each.color} />\n              </LineChart>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default LineChartItem\n","const boxes = [\n  {\n    id: 'confirmed',\n    displayText: 'Confirmed',\n    imageUrl:\n      'https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/Group_rtygto.png',\n    altName: 'country wide confirmed cases pic',\n    cName: 'confirmed12',\n  },\n  {\n    id: 'recovered',\n    displayText: 'Recovered',\n    imageUrl:\n      'https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/recovered_1_mnz2xy.png',\n    altName: 'country wide recovered cases pic',\n    cName: 'recovered12',\n  },\n  {\n    id: 'active',\n    displayText: 'Active',\n    imageUrl:\n      'https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/protection_1_btp8wk.png',\n    altName: 'country wide active cases pic',\n    cName: 'active12',\n  },\n  {\n    id: 'deceased',\n    displayText: 'Deceased',\n    imageUrl:\n      'https://res.cloudinary.com/dbphffmis/image/upload/v1637413101/Outline_fqrmo2.png',\n    altName: 'country wide deceased cases pic',\n    cName: 'deceased12',\n  },\n]\n\nexport default boxes\n","import {Component} from 'react'\nimport BoxItem from '../BoxItem'\nimport Footer from '../Footer'\nimport './index.css'\nimport statesList from '../../states'\nimport TopDistrictItems from '../TopDistrictItems'\nimport LineChartItem from '../LineChartItem'\nimport boxes from '../../boxes'\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\nclass StateItem extends Component {\n  state = {stateData: [], allDistrictsData: [], activeBox: 'confirmed'}\n\n  componentDidMount() {\n    this.getStateDetails()\n  }\n\n  getStateDetails = async () => {\n    const {match} = this.props\n    const {params} = match\n    const {id} = params\n    const response = await fetch(`https://apis.ccbp.in/covid19-state-wise-data`)\n    const data = await response.json()\n    const {total, meta, districts} = data[id]\n    console.log(data[id])\n    const confirmed = total.confirmed ? total.confirmed : 0\n    const deceased = total.deceased ? total.deceased : 0\n    const recovered = total.recovered ? total.recovered : 0\n    const tested = total.tested ? total.tested : 0\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    const population = data[id].meta.population ? data[id].meta.population : 0\n    const lastUpdateDate = new Date(meta.last_updated)\n    const stateName = [statesList.find(state => state.state_code === id)]\n    const date = lastUpdateDate.getDate()\n    const year = lastUpdateDate.getUTCFullYear()\n    const month = months[lastUpdateDate.getMonth()]\n    const overallDate = `${month} ${date} ${year}`\n    const updatedStateData = {\n      confirmed: internationalNumberFormat.format(confirmed),\n      deceased: internationalNumberFormat.format(deceased),\n      recovered: internationalNumberFormat.format(recovered),\n      tested: internationalNumberFormat.format(tested),\n      population,\n      active: internationalNumberFormat.format(\n        confirmed - (deceased + recovered),\n      ),\n      overallDate,\n      stateName: stateName[0]?.state_name,\n    }\n    this.setState({stateData: updatedStateData})\n    const updatedDistrictsList = []\n    const districtKeyNames = Object.keys(data[id].districts)\n    districtKeyNames.forEach(eachDistrictName => {\n      if (districts[eachDistrictName]) {\n        const districtWiseConfirmed =\n          districts[eachDistrictName].total?.confirmed\n        const districtWiseDeceased = districts[eachDistrictName].total?.deceased\n        const districtWiseRecovered =\n          districts[eachDistrictName].total?.recovered\n        const updatedEachDistrict = {\n          districtWiseConfirmed,\n          districtWiseRecovered,\n          districtWiseDeceased,\n          districtWiseActive:\n            districtWiseConfirmed -\n            (districtWiseDeceased + districtWiseRecovered),\n          districtName: eachDistrictName,\n        }\n        updatedDistrictsList.push(updatedEachDistrict)\n      }\n    })\n    this.setState({allDistrictsData: updatedDistrictsList})\n  }\n\n  onClickBox = id => {\n    this.setState({activeBox: id})\n  }\n\n  sortData = () => {\n    const {allDistrictsData, activeBox} = this.state\n    switch (activeBox) {\n      case 'confirmed':\n        return allDistrictsData.sort(\n          (a, b) => b.districtWiseConfirmed - a.districtWiseConfirmed,\n        )\n      case 'recovered':\n        return allDistrictsData.sort(\n          (a, b) => b.districtWiseRecovered - a.districtWiseRecovered,\n        )\n      case 'deceased':\n        return allDistrictsData.sort(\n          (a, b) => b.districtWiseDeceased - a.districtWiseDeceased,\n        )\n      case 'active':\n        return allDistrictsData.sort(\n          (a, b) => b.districtWiseActive - a.districtWiseActive,\n        )\n      default:\n        return null\n    }\n  }\n\n  render() {\n    const {stateData, activeBox} = this.state\n    const a = this.sortData()\n    const {match} = this.props\n    const {params} = match\n    const {id} = params\n    return (\n      <>\n        <div className=\"state-bg\">\n          <div className=\"state-top\">\n            <div className=\"state-left-section\">\n              <p className=\"state-name-heading\">{stateData.stateName}</p>\n              <p>Last Updated On {stateData.overallDate}</p>\n            </div>\n            <div className=\"state-right-section\">\n              <p>Tested</p>\n              <p className=\"tested-count\">{stateData.tested}</p>\n            </div>\n          </div>\n          <ul className=\"ul-boxes-container\">\n            {boxes.map(each => (\n              <BoxItem\n                key={each.id}\n                details={each}\n                stateData={stateData}\n                onClickBox={this.onClickBox}\n                activeBox={activeBox}\n              />\n            ))}\n          </ul>\n          <h1 className=\"top-districts-head\">Top Districts</h1>\n          <TopDistrictItems details={a} activeBox={activeBox} />\n          <h1 className=\"charts-heading\">Daily Spread Trends</h1>\n          <LineChartItem sName={id} />\n        </div>\n        <Footer />\n      </>\n    )\n  }\n}\n\nexport default StateItem\n","import {Switch, Route} from 'react-router-dom'\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport About from './components/About'\nimport StateItem from './components/StateItem'\nimport './App.css'\n\nconst App = () => (\n  <>\n    <Header />\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/about\" component={About} />\n      <Route path=\"/state/:id\" component={StateItem} />\n    </Switch>\n  </>\n)\n\nexport default App\n","import React from 'react'\nimport {BrowserRouter} from 'react-router-dom'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}